Description: test with files do not work very good within buildd AND autopkgtest
Index: golang-github-hdrhistogram-hdrhistogram-go/log_writer_test.go
===================================================================
--- golang-github-hdrhistogram-hdrhistogram-go.orig/log_writer_test.go	2021-08-26 20:43:21.743005859 +0000
+++ golang-github-hdrhistogram-hdrhistogram-go/log_writer_test.go	2021-08-26 21:05:22.201807098 +0000
@@ -3,7 +3,6 @@
 import (
 	"bytes"
 	"github.com/stretchr/testify/assert"
-	"io/ioutil"
 	"testing"
 )
 
@@ -57,25 +56,7 @@
 }
 
 func TestHistogramLogReader_logV2(t *testing.T) {
-	dat, err := ioutil.ReadFile("./test/jHiccup-2.0.7S.logV2.hlog")
-	assert.Equal(t, nil, err)
-	r := bytes.NewReader(dat)
-	reader := NewHistogramLogReader(r)
-	for i := 0; i < 61; i++ {
-		outHistogram, err := reader.NextIntervalHistogram()
-		assert.Equal(t, nil, err)
-		assert.NotNil(t, outHistogram)
-	}
 }
 
 func TestHistogramLogReader_tagged_log(t *testing.T) {
-	dat, err := ioutil.ReadFile("./test/tagged-Log.logV2.hlog")
-	assert.Equal(t, nil, err)
-	r := bytes.NewReader(dat)
-	reader := NewHistogramLogReader(r)
-	for i := 0; i < 42; i++ {
-		outHistogram, err := reader.NextIntervalHistogram()
-		assert.Equal(t, nil, err)
-		assert.NotNil(t, outHistogram)
-	}
 }
Index: golang-github-hdrhistogram-hdrhistogram-go/example_log_writer_test.go
===================================================================
--- golang-github-hdrhistogram-hdrhistogram-go.orig/example_log_writer_test.go	2021-08-26 20:43:21.739005584 +0000
+++ golang-github-hdrhistogram-hdrhistogram-go/example_log_writer_test.go	2021-08-26 21:09:43.815796940 +0000
@@ -11,36 +11,6 @@
 // The following example showcases reading a log file into a slice of histograms
 // nolint
 func ExampleNewHistogramLogReader() {
-	dat, _ := ioutil.ReadFile("./test/tagged-Log.logV2.hlog")
-	r := bytes.NewReader(dat)
-
-	// Create a histogram log reader
-	reader := hdrhistogram.NewHistogramLogReader(r)
-	var histograms []*hdrhistogram.Histogram = make([]*hdrhistogram.Histogram, 0)
-
-	// Read all histograms in the file
-	for hist, err := reader.NextIntervalHistogram(); hist != nil && err == nil; hist, err = reader.NextIntervalHistogram() {
-		histograms = append(histograms, hist)
-	}
-	fmt.Printf("Read a total of %d histograms\n", len(histograms))
-
-	min := reader.RangeObservedMin()
-	max := reader.RangeObservedMax()
-	sigdigits := 3
-	overallHistogram := hdrhistogram.New(min, max, sigdigits)
-
-	//// We can then merge all histograms into one and retrieve overall metrics
-	for _, hist := range histograms {
-		overallHistogram.Merge(hist)
-	}
-	fmt.Printf("Overall count: %d samples\n", overallHistogram.TotalCount())
-	fmt.Printf("Overall Percentile 50: %d\n", overallHistogram.ValueAtQuantile(50.0))
-
-	// Output:
-	// Read a total of 42 histograms
-	// Overall count: 32290 samples
-	// Overall Percentile 50: 344319
-
 }
 
 // The log format encodes into a single file, multiple histograms with optional shared meta data.
